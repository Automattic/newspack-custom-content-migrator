<?php

namespace NewspackCustomContentMigrator\Migrator\General;

use \NewspackCustomContentMigrator\Migrator\InterfaceMigrator;
use \WP_CLI;

class PostsMigrator implements InterfaceMigrator {

	/**
	 * `meta_key` which gets assigned to exported posts, contains the original post ID.
	 */
	const META_KEY_ORIGINAL_ID = 'newspack_custom_content_migrator-original_post_id';

	/**
	 * @var string Staging site pages export file name.
	 */
	const STAGING_PAGES_EXPORT_FILE = 'newspack-staging_pages_all.xml';

	/**
	 * @var null|InterfaceMigrator Instance.
	 */
	private static $instance = null;

	/**
	 * Constructor.
	 */
	private function __construct() {
	}

	/**
	 * Singleton get_instance().
	 *
	 * @return InterfaceMigrator|null
	 */
	public static function get_instance() {
		$class = get_called_class();
		if ( null === self::$instance ) {
			self::$instance = new $class;
		}

		return self::$instance;
	}

	/**
	 * See InterfaceMigrator::register_commands.
	 */
	public function register_commands() {
		WP_CLI::add_command( 'newspack-content-migrator export-posts', array( $this, 'cmd_export_posts' ), [
			'shortdesc' => 'Exports posts/pages by post-IDs to an XML file using `wp export`.',
			'synopsis'  => [
				[
					'type'        => 'assoc',
					'name'        => 'output-dir',
					'description' => 'Output directory, no ending slash.',
					'optional'    => false,
					'repeating'   => false,
				],
				[
					'type'        => 'assoc',
					'name'        => 'output-xml-file',
					'description' => 'Output XML file name.',
					'optional'    => false,
					'repeating'   => false,
				],
				[
					'type'        => 'assoc',
					'name'        => 'post-ids',
					'description' => 'CSV post/page IDs to migrate.',
					'optional'    => true,
					'repeating'   => false,
				],
			],
		] );

		WP_CLI::add_command( 'newspack-content-migrator import-posts', array( $this, 'cmd_import_posts' ), [
			'shortdesc' => 'Imports custom posts from the XML file generated by `wp export`.',
			'synopsis'  => [
				[
					'type'        => 'assoc',
					'name'        => 'file',
					'description' => 'XML file full path.',
					'optional'    => false,
					'repeating'   => false,
				],
			],
		] );

		WP_CLI::add_command( 'newspack-content-migrator export-all-staging-pages', array( $this, 'cmd_export_all_staging_site_pages' ), [
			'shortdesc' => 'Exports all Pages from the Staging site.',
			'synopsis'  => [
				[
					'type'        => 'assoc',
					'name'        => 'output-dir',
					'description' => 'Output directory, no ending slash.',
					'optional'    => false,
					'repeating'   => false,
				],
			],
		] );

		WP_CLI::add_command( 'newspack-content-migrator import-staging-site-pages', array( $this, 'cmd_import_staging_site_pages' ), [
			'shortdesc' => 'Imports pages which were exported from the Staging site',
			'synopsis'  => [
				[
					'type'        => 'assoc',
					'name'        => 'input-dir',
					'description' => 'Full path to the location of the XML file containing staging files.',
					'optional'    => false,
					'repeating'   => false,
				],
			],
		] );

		WP_CLI::add_command( 'newspack-content-migrator delete-export-postmeta', array( $this, 'cmd_delete_export_postmeta' ), [
			'shortdesc' => 'Removes the postmeta with original ID which gets set on all exported posts/pages.',
		] );
	}

	/**
	 * Callable for export-posts command.
	 *
	 * @param array $args
	 * @param array $assoc_args
	 */
	public function cmd_export_posts( $args, $assoc_args ) {
		$output_dir        = isset( $assoc_args[ 'output-dir' ] ) ? $assoc_args[ 'output-dir' ] : null;
		$output_file       = isset( $assoc_args[ 'output-xml-file' ] ) ? $assoc_args[ 'output-xml-file' ] : null;
		$post_ids_csv      = isset( $assoc_args[ 'post-ids' ] ) ? $assoc_args[ 'post-ids' ] : null;
		if ( is_null( $output_dir ) ) {
			WP_CLI::error( 'Invalid output dir.' );
		}
		if ( is_null( $output_file ) ) {
			WP_CLI::error( 'Invalid output file.' );
		}
		if ( is_null( $post_ids_csv ) ) {
			WP_CLI::error( 'One of these is mandatory: post-ids or created-from' );
		}

		$post_ids = explode( ',', $post_ids_csv );

		WP_CLI::line( sprintf( 'Exporting post IDs %s to %s...', implode( ',', $post_ids ), $output_dir . '/' . $output_file ) );

		$this->migrator_export_posts( $post_ids, $output_dir, $output_file );

		WP_CLI::success( 'Done.' );
	}

	/**
	 * Exports posts ans sets a meta with the original ID when it was exported.
	 *
	 * @param array  $post_ids    Post IDs.
	 * @param string $output_dir  Output dir.
	 * @param string $output_file Output file.
	 *
	 * @return bool
	 */
	public function migrator_export_posts( $post_ids, $output_dir, $output_file ) {
		if ( empty( $post_ids ) ) {
			WP_CLI::warning( 'No posts to export.' );
			return false;
		}
		foreach ( $post_ids as $key => $post_id ) {
			update_post_meta( $post_id, self::META_KEY_ORIGINAL_ID, $post_id );
		}

		$post_ids = array_values( $post_ids );
		$this->export_posts( $post_ids, $output_dir, $output_file );

		return true;
	}

	/**
	 * Actual exporting of posts to file.
	 *
	 * @param array  $post_ids    Post IDs.
	 * @param string $output_dir  Output dir.
	 * @param string $output_file Output file.
	 */
	private function export_posts( $post_ids, $output_dir, $output_file ) {
		$post_ids_csv = implode( ',', $post_ids );
		WP_CLI::runcommand( "export --post__in=$post_ids_csv --dir=$output_dir --filename_format=$output_file --with_attachments" );
	}

	/**
	 * Callable for import-posts command.
	 *
	 * @param array $args
	 * @param array $assoc_args
	 */
	public function cmd_import_posts( $args, $assoc_args ) {
		$file = isset( $assoc_args[ 'file' ] ) ? $assoc_args[ 'file' ] : null;
		if ( is_null( $file ) || ! file_exists( $file ) ) {
			WP_CLI::error( 'Invalid file provided.' );
		}

		WP_CLI::line( 'Importing posts...' );

		$this->import_posts( $file );
		wp_cache_flush();

		WP_CLI::success( 'Done.' );
	}

	/**
	 * @param string $file File for Import.
	 *
	 * @return mixed
	 */
	public function import_posts( $file ) {
		$options = [
			'return' => true,
		];
		$output = WP_CLI::runcommand( "import $file --authors=create", $options );

		return $output;
	}

	/**
	 * Exports all Pages from the Staging site.
	 *
	 * @param $args
	 * @param $assoc_args
	 */
	public function cmd_export_all_staging_site_pages( $args, $assoc_args ) {
		$output_dir = isset( $assoc_args[ 'output-dir' ] ) ? $assoc_args[ 'output-dir' ] : null;
		if ( is_null( $output_dir ) ) {
			WP_CLI::error( 'Invalid output dir.' );
		}

		WP_CLI::line( sprintf( 'Exporting all Staging site Pages to %s ...', $output_dir . '/' . self::STAGING_PAGES_EXPORT_FILE ) );

		$post_ids = $this->get_all_pages();
		$this->migrator_export_posts( $post_ids, $output_dir, self::STAGING_PAGES_EXPORT_FILE );

		WP_CLI::success( 'Done.' );
	}

	/**
	 * Gets IDs of all the Pages.
	 *
	 * @return array Pages IDs.
	 */
	public function get_all_pages() {
		$ids = array();

		wp_reset_postdata();

		// Arguments in \WP_Query::parse_query .
		$args = array(
			'nopaging' => true,
			'post_type' => 'page',
			'post_status' => array( 'publish', 'future', 'draft', 'pending', 'private', 'inherit' ),
		);
		$query = new \WP_Query( $args );
		$posts = $query->get_posts();
		if ( ! empty( $posts ) ) {
			foreach ( $posts as $post ) {
				$ids[] = $post->ID;
			}
		}

		wp_reset_postdata();

		return $ids;
	}

	/**
	 * Callable for import-posts command.
	 *
	 * @param array $args
	 * @param array $assoc_args
	 */
	public function cmd_import_staging_site_pages( $args, $assoc_args ) {
		$input_dir = isset( $assoc_args[ 'input-dir' ] ) ? $assoc_args[ 'input-dir' ] : null;
		if ( is_null( $input_dir ) || ! file_exists( $input_dir ) ) {
			WP_CLI::error( 'Invalid input dir.' );
		}

		WP_CLI::line( 'Importing Pages from Staging site...' );

		WP_CLI::line( 'First deleting all Pages which will be imported from Staging site to prevent duplicates...' );
		$this->delete_pages_from_staging_site();

		WP_CLI::line( 'Importing Pages from the Staging site (using `wp import`, might take a little longer) ...' );
		$output = $this->import_posts( $input_dir . '/' . self::STAGING_PAGES_EXPORT_FILE );
		wp_cache_flush();

		WP_CLI::success( 'Done.' );
	}

	/**
	 * Deletes all pages which will be imported from the Staging site.
	 */
	public function delete_pages_from_staging_site() {
		$post_ids = $this->get_all_pages_from_staging();
		if ( empty( $post_ids ) ) {
			WP_CLI::success( 'No Pages found.' );
			return;
		}

		$progress = \WP_CLI\Utils\make_progress_bar( 'Deleting ' . count( $post_ids ) . ' pages...', count( $post_ids ) );
		foreach ( $post_ids as $id ) {
			$progress->tick();
			wp_delete_post( $id, true );
			clean_post_cache( $id );
		}
		$progress->finish();

		wp_reset_postdata();
		wp_cache_flush();
	}

	/**
	 * Gets all pages which were exported from Staging and that are also found in current wp_posts.
	 *
	 * @return array|void Array of page IDs.
	 */
	public function get_all_pages_from_staging() {
		global $wpdb;

		$ids = array();
		wp_reset_postdata();

		$staging_posts_table = 'staging_' . $wpdb->prefix . 'posts';
		$posts_table = $wpdb->prefix . 'posts';
		// Notes on joining: post_content will have different hostnames; guid is misleading (new page on live would get the same guid).
		$sql = "SELECT wp.ID FROM {$posts_table} wp
			JOIN {$staging_posts_table} swp
				ON swp.post_name = wp.post_name
				AND swp.post_title = wp.post_title
				AND swp.post_status = wp.post_status
			WHERE wp.post_type = 'page';";
		// phpcs:ignore -- false positive, all params are fully sanitized.
		$results = $wpdb->get_results( $sql );

		if ( empty( $results ) ) {
			return;
		}

		foreach ( $results as $result ) {
			$ids[] = $result->ID;
		}
		return $ids;
	}

	/**
	 * Callable for remove-export-postmeta command.
	 *
	 * @param array $args
	 * @param array $assoc_args
	 */
	public function cmd_delete_export_postmeta() {
		WP_CLI::line( sprintf( 'Deleting %s postmeta from all ther posts and pages...', self::META_KEY_ORIGINAL_ID ) );

		$args = array(
			'post_type' => array( 'post', 'page' ),
			'post_status' => 'publish',
			'meta_query' => array(
				array(
					'key' => self::META_KEY_ORIGINAL_ID,
				)
			)
		);
		$query = new \WP_Query( $args );
		$posts = $query->posts;

		foreach ( $posts as $post ) {
			delete_post_meta( $post->ID, self::META_KEY_ORIGINAL_ID );
		}

		WP_CLI::success( 'Done.' );
	}

	/**
	 * When exporting objects, the PostsMigrator sets PostsMigrator::META_KEY_ORIGINAL_ID meta key with the ID they had at the
	 * time. This function gets the new/current ID which changed when they were imported.
	 *
	 * @param $original_post_id ID.
	 *
	 * @return |null
	 */
	public function get_current_post_id_from_original_post_id( $original_post_id ) {
		global $wpdb;

		$new_id = $wpdb->get_var( $wpdb->prepare( "SELECT p.ID
			FROM kaw_posts p
			JOIN kaw_postmeta pm ON pm.post_id = p.ID
			AND pm.meta_key = '%s'
			AND pm.meta_value = %d ; ",
			self::META_KEY_ORIGINAL_ID,
			$original_post_id
		) );

		return isset( $new_id ) ? $new_id : null;
	}
}
